stages:
  - build
  - test
  - release
  - deploy

variables:
  SAST_EXCLUDED_ANALYZERS: "gosec"
  APP_PART: frontend

include:
  - template: Security/SAST.gitlab-ci.yml
  - project: 'templates/ci'
    file: 'DockerInDockerTemplate.yml'

frontend-build-artifacts:
  stage: build
  cache:
    key: nodejs
    paths:
      - ${NODE_CACHE_PATH}
      - ${NPM_CACHE_PATH}
  script:
      - cd ${APP_PART}
      - npm ci --cache ${NPM_CACHE_PATH} --prefer-offline
      - ls -la
      - npm run build
      - mkdir ${APP_NAME}-${APP_PART}-${APP_VERSION}
      - mv dist ${APP_NAME}-${APP_PART}-${APP_VERSION}/public_html
  artifacts:
    untracked: false
    expire_in: "7 days"
    paths:
      - ${CI_PROJECT_DIR}/${APP_PART}/${APP_NAME}-${APP_PART}-${APP_VERSION}/public_html

frontend-build-docker-image:
  stage: build
  cache:
    key: nodejs
    paths:
      - ${NODE_CACHE_PATH}
      - ${NPM_CACHE_PATH}
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - ls -la frontend
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"${CI_REGISTRY}\":{\"auth\":\"$(printf "%s:%s" "${CI_REGISTRY_USER}" "${CI_REGISTRY_PASSWORD}" | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
    - >
      /kaniko/executor
      --use-new-run
      --snapshotMode=redo
      --cache=true
      --context "${CI_PROJECT_DIR}/${APP_PART}"
      --dockerfile "${CI_PROJECT_DIR}/${APP_PART}/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}/${APP_NAME}-${APP_PART}:${APP_VERSION}"

frontend-sonarqube-sast:
  dependencies: []
  stage: test
  image:
    name: sonarsource/sonar-scanner-cli:latest
  cache:
    key: nodejs-sonar
    paths:
      - ${SONARQUBE_CACHE_SCANNERWORK}
      - ${SONARQUBE_CACHE_GITLAB}
  before_script:
    - mkdir ${SONARQUBE_CACHE_GITLAB} || true
    - cp -r ${SONARQUBE_CACHE_GITLAB}/* ${SONARQUBE_CACHE} || true
  script:
    - cd ${APP_PART}
    - >
      sonar-scanner -Dsonar.qualitygate.wait=true
      -Dsonar.projectKey=${SONARQUBE_TOKEN_NAME}
      -Dsonar.host.url=${SONARQUBE_URL}
      -Dsonar.login=${SONARQUBE_TOKEN}
      -Dsonar.projectName=YANBODRIEVSKIY_${APP_NAME^^}_${APP_PART^^}
      -Dsonar.user.home=${SONARQUBE_CACHE}
    - cp -r ${SONARQUBE_CACHE}/* ${SONARQUBE_CACHE_GITLAB}

frontend-upload-artifacts:
  variables:
    GIT_STRATEGY: none
  stage: release
  script:
    - tar czvf ${APP_NAME}-${APP_PART}-${APP_VERSION}.tar.gz ${CI_PROJECT_DIR}/${APP_PART}/${APP_NAME}-${APP_PART}-${APP_VERSION}/public_html
    - curl  -u "${NEXUS_REPO_USER}:$(echo ${NEXUS_REPO_PASS} | base64 -d)" --upload-file ${APP_NAME}-${APP_PART}-${APP_VERSION}.tar.gz ${NEXUS_REPO_URL}-${APP_NAME}-${APP_PART}/${APP_NAME}/${APP_PART}/${APP_VERSION}/${APP_NAME}-${APP_PART}-${APP_VERSION}.tar.gz

frontend-upload-docker-images:
  variables:
    GIT_STRATEGY: none
  image: docker:20.10.12-dind-rootless
  stage: release
  before_script:
    - until docker info; do sleep 1; done
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE/${APP_NAME}-${APP_PART}:${APP_VERSION}
    - docker tag $CI_REGISTRY_IMAGE/${APP_NAME}-${APP_PART}:${APP_VERSION} $CI_REGISTRY_IMAGE/${APP_NAME}-${APP_PART}:latest
    - docker push $CI_REGISTRY_IMAGE/${APP_NAME}-${APP_PART}:latest
